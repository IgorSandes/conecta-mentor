generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  profiles         Profile[] // sem onDelete aqui
  calendarSessions Calendar[]

  favorites Favorite[] @relation("UserFavorites")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          String      @id @default(cuid())
  type        ProfileType
  profession  String
  description String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  mentorSessions    Calendar[] @relation("MentorProfile")
  mentoradoSessions Calendar[] @relation("MentoradoProfile")

  favoritesGiven    Favorite[] @relation("UserProfileFavorites")
  favoritesReceived Favorite[] @relation("FavoritedProfiles")

  createdAt DateTime @default(now())
}

enum ProfileType {
  MENTOR
  MENTORADO
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Calendar {
  id          String   @id @default(cuid())
  dateTime    DateTime
  meetingLink String?

  userId      String
  profileId   String
  mentoradoId String

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile   Profile @relation("MentorProfile", fields: [profileId], references: [id], onDelete: Cascade)
  mentorado Profile @relation("MentoradoProfile", fields: [mentoradoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Favorite {
  id String @id @default(cuid())

  userId        String
  userProfileId String
  favoriteId    String

  user        User    @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  userProfile Profile @relation("UserProfileFavorites", fields: [userProfileId], references: [id], onDelete: Cascade)
  favorite    Profile @relation("FavoritedProfiles", fields: [favoriteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userProfileId, favoriteId])
}
